use std::convert::TryFrom;

use actix_web::web::Json;
use serde::{Deserialize, Serialize};
use wither::{
    bson::oid::ObjectId,
    bson::{doc, ser::Error as SerializeError, to_document, Document},
    Model,
};

#[derive(Debug, Default, Model, Serialize, Deserialize)]
#[model(index(keys = r#"doc!{"summary": 1}"#, options = r#"doc!{"unique": true}"#))]
pub struct Todo {
    /// The ID of the todo, this is autogenerated by mongo
    #[serde(rename = "_id", skip_serializing_if = "Option::is_none")]
    pub id: Option<ObjectId>,
    /// The Todo's summary, must be unique
    pub summary: String,
    /// The Todo's optional description
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The Todo's completition status
    pub completed: bool,
}

#[derive(Debug, Serialize, Deserialize)]
/// Create a new todo input
pub struct NewTodoInput {
    /// The Todo's summary, must be unique
    pub summary: String,
    /// The Todo's optional description
    pub description: Option<String>,
}

/// Converts a NewTodoInput into Todo
impl From<NewTodoInput> for Todo {
    fn from(input: NewTodoInput) -> Self {
        // Deconstruct inner properties
        let NewTodoInput {
            summary,
            description,
        } = input;
        // Create a new todo, use summary and description from input and for the rest use the default value
        Self {
            summary,
            description,
            ..Default::default()
        }
    }
}

/// Converts a Json<NewTodoInput> into Todo
impl From<Json<NewTodoInput>> for Todo {
    fn from(input: Json<NewTodoInput>) -> Self {
        // .into_inner() is implemented in actix-web,
        // it transforms Json<T> into T
        // then we call into to get a Todo object from our implementation above
        input.into_inner().into()
    }
}

#[derive(Debug, Serialize, Deserialize)]
/// Create a new substitution todo input
pub struct SubstituteTodoInput {
    /// The Todo's summary, must be unique
    pub summary: String,
    /// The Todo's optional description
    pub description: Option<String>,
    /// The Todo's completition status
    pub completed: bool,
}

impl TryFrom<SubstituteTodoInput> for Document {
    type Error = SerializeError;

    fn try_from(value: SubstituteTodoInput) -> Result<Self, Self::Error> {
        to_document(&value)
    }
}

#[derive(Debug, Serialize, Deserialize)]
/// Create an update todo input
pub struct UpdateTodoInput {
    /// The Todo's summary, must be unique
    #[serde(skip_serializing_if = "Option::is_none")]
    pub summary: Option<String>,
    /// The Todo's optional description
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The Todo's completition
    #[serde(skip_serializing_if = "Option::is_none")]
    pub completed: Option<bool>,
}

impl TryFrom<UpdateTodoInput> for Document {
    type Error = SerializeError;

    fn try_from(value: UpdateTodoInput) -> Result<Self, Self::Error> {
        to_document(&value)
    }
}
